## Product Inventory Configuration
kineteco.greeting-message=Product Inventory Service is up!

## Quarkus core
quarkus.banner.enabled=false
quarkus.native.resources.includes=import.sql 

## Kubernetes extension
quarkus.container-image.group=com.kineteco
quarkus.container-image.name=product-inventory-service
quarkus.kubernetes.name=product-inventory-service
%dev.quarkus.log.category."com.kineteco".level=DEBUG
%test.quarkus.log.category."com.kineteco".level=DEBUG

## Panache
# drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation = drop-and-create

%prod.quarkus.kubernetes-config.enabled=true
%prod.quarkus.kubernetes-config.secrets.enabled=true
%prod.quarkus.kubernetes-config.secrets=kineteco-credentials 

%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.username=${username}
%prod.quarkus.datasource.password=${password}
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://postgres.default:5432/kineteco

quarkus.hibernate-orm.sql-load-script=import.sql

## Kafka messaging extension
mp.messaging.outgoing.orders.connector=smallrye-kafka
mp.messaging.outgoing.orders.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

